# frozen_string_literal: true

require_relative 'issue/watchers'
require_relative 'issue/comments'

module Rujira
  module Api
    # Provides access to Jira issues via the REST API.
    # API reference:
    # https://docs.atlassian.com/software/jira/docs/api/REST/9.17.0/#api/2/issue
    #
    class Issue < Common # rubocop:disable Metrics/ClassLength
      include Watchers
      include Comments

      # Creates a new issue.
      #
      # @yield [builder] Optional block to configure the request payload.
      # @return [Object] The API response containing the created issue.
      #
      # @example Create an issue
      #   client.Issue.create do
      #     payload fields: {
      #       summary: "New bug report",
      #       issuetype: { name: 'Task' },
      #       project: { key: "TEST" },
      #       description: 'This task was generated by the bot when creating changes in the repository.'
      #     }
      #   end
      #
      def create(&block)
        builder do
          path 'issue'
          method :post
          instance_eval(&block) if block_given?
        end
        run
      end

      # Creates multiple issues in bulk.
      #
      # @yield [builder] Block to configure the payload for bulk creation.
      # @return [Object] The API response after creating issues.
      #
      # @example Create issues in bulk
      #   client.Issue.create_bulk do
      #     payload issues: [
      #       { fields: { project: { key: "TEST" }, summary: "Issue 1", issuetype: { name: "Task" } } },
      #       { fields: { project: { key: "TEST" }, summary: "Issue 2", issuetype: { name: "Bug" } } }
      #     ]
      #   end
      #
      def create_bulk(&block)
        builder do
          path 'issue/bulk'
          method :post
          instance_eval(&block) if block_given?
        end
        run
      end

      # Retrieves an issue by its ID or key.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response containing the issue details.
      #
      # @example Get an issue
      #   client.Issue.get("TEST-123")
      #
      def get(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Deletes an issue by its ID or key.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response after deletion.
      #
      # @example Delete an issue
      #   client.Issue.delete("TEST-123")
      #
      def delete(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          method :delete
          instance_eval(&block) if block_given?
        end
        run
      end

      alias del delete

      # Updates an existing issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the update payload.
      # @return [Object] The API response after updating the issue.
      #
      # @example Edit an issue
      #   client.Issue.edit("TEST-123") do
      #     payload fields: { summary: "Updated summary" }
      #   end
      #
      def edit(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          method :put
          instance_eval(&block) if block_given?
        end
        run
      end

      # Archives an issue by its ID or key.
      #
      # @param [String] id_or_key The issue ID or key.
      # @return [Object] The API response after archiving the issue.
      #
      # @example Archive an issue
      #   client.Issue.archive("TEST-123")
      #
      def archive(id_or_key)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/archive"
          method :put
        end
        run
      end

      # Retrieves the archive information for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @return [Object] The API response containing archive details for the issue.
      #
      # @example List archive information for an issue
      #   client.Issue.list_archive("TEST-123")
      def list_archive(id_or_key)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/archive"
        end
        run
      end

      # Updates the assignee of an issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Block to configure the payload for assignee update.
      # @return [Object] The API response after updating the assignee.
      #
      # @example Assign an issue to a user
      #   client.Issue.assignee("TEST-123") do
      #     payload name: "john.doe"
      #   end
      #
      def assignee(id_or_key)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/assignee"
          method :put
        end
        run
      end

      # Retrieves the edit metadata for a given issue.
      # This provides information about which fields can be edited and their constraints.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response containing edit metadata.
      #
      # @example Get edit metadata for an issue
      #   client.Issue.editmeta("TEST-123") do
      #     # Optional: add query parameters or headers
      #     params expand: "projects,issuetypes.fields"
      #   end
      def editmeta(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/editmeta"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Sends a notification about a specific issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Block to configure the payload for the notification.
      # @return [Object] The API response after sending the notification.
      #
      # @example Notify users about an issue
      #   client.Issue.notify("TEST-123") do
      #     payload {
      #       subject: "Issue Update",
      #       textBody: "The issue has been updated.",
      #       to: [{ type: "user", username: "john.doe" }]
      #     }
      #   end
      def notify(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :post
          path "issue/#{id_or_key}/notify"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Retrieves remote links for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response containing remote links.
      #
      # @example Get remote links for an issue
      #   client.Issue.remotelink("TEST-123") do
      #     # Optional: add query parameters or headers
      #     params expand: "application"
      #   end
      def remotelink(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/remotelink"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Creates a remote link for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Block to configure the payload for the remote link.
      # @return [Object] The API response after creating the remote link.
      #
      # @example Create a remote link for an issue
      #   client.Issue.create_remotelink("TEST-123") do
      #     payload {
      #       object: {
      #         url: "https://example.com/task/123",
      #         title: "External Task"
      #       }
      #     }
      #   end
      def create_remotelink(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :post
          path "issue/#{id_or_key}/remotelink"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Deletes remote links for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response after deleting the remote link(s).
      #
      # @example Delete remote links for an issue
      #   client.Issue.delete_remotelink("TEST-123") do
      #     # Optional: add query parameters or headers if needed
      #     params globalId: "com.example:task-123"
      #   end
      def delete_remotelink(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :delete
          path "issue/#{id_or_key}/remotelink"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Retrieves a specific remote link for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] link_id The remote link ID.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response containing the remote link details.
      #
      # @example Get a specific remote link
      #   client.Issue.get_remotelink_by_id("TEST-123", "20001") do
      #     # Optional: add headers or query parameters
      #   end
      def get_remotelink_by_id(id_or_key, link_id, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/remotelink/#{link_id}"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Updates a specific remote link for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] link_id The remote link ID.
      # @yield [builder] Block to configure the payload for updating the remote link.
      # @return [Object] The API response after updating the remote link.
      #
      # @example Update a specific remote link
      #   client.Issue.update_remotelink("TEST-123", "20001") do
      #     payload {
      #       object: {
      #         url: "https://example.com/updated-task/123",
      #         title: "Updated Task"
      #       }
      #     }
      #   end
      def update_remotelink(id_or_key, link_id, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :put
          path "issue/#{id_or_key}/remotelink/#{link_id}"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Deletes a specific remote link by its ID for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] link_id The remote link ID.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response after deleting the remote link.
      #
      # @example Delete a specific remote link
      #   client.Issue.delete_remotelink_by_id("TEST-123", "20001") do
      #     # Optional: add headers or query parameters
      #   end
      def delete_remotelink_by_id(id_or_key, link_id, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :delete
          path "issue/#{id_or_key}/remotelink/#{link_id}"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Restores a previously archived issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response after restoring the issue.
      #
      # @example Restore an issue
      #   client.Issue.restore("TEST-123") do
      #     # Optional: add headers or payload if needed
      #   end
      def restore(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :put
          path "issue/#{id_or_key}/restore"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Performs a transition on a given issue (e.g., change status).
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Block to configure the payload for the transition.
      # @return [Object] The API response after performing the transition.
      #
      # @example Transition an issue
      #   client.Issue.transitions("TEST-123") do
      #     payload transition: { id: "31" }
      #   end
      def transitions(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          method :post
          path "issue/#{id_or_key}/transitions"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Retrieves available transitions for a given issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure additional request parameters.
      # @return [Object] The API response containing available transitions.
      #
      # @example Get available transitions
      #   client.Issue.get_transitions("TEST-123") do
      #     # Optional: add query parameters or headers
      #   end
      def get_transitions(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/transitions"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Uploads an attachment to an issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] path The local file path of the attachment.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response containing the uploaded attachment.
      #
      # @example Upload an attachment
      #   client.Issue.attachments("TEST-123", "/tmp/file.txt")
      #
      def attachments(id_or_key, path, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        @client.Attachments.create id_or_key, path, &block
      end
    end
  end
end
