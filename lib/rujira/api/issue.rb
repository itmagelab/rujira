# frozen_string_literal: true

module Rujira
  module Api
    # Provides access to Jira issues via the REST API.
    # API reference:
    # https://docs.atlassian.com/software/jira/docs/api/REST/9.17.0/#api/2/issue
    #
    class Issue < Common
      # Creates a new issue.
      #
      # @yield [builder] Optional block to configure the request payload.
      # @return [Object] The API response containing the created issue.
      #
      # @example Create an issue
      #   client.Issue.create do
      #     payload fields: {
      #       summary: "New bug report",
      #       issuetype: { name: 'Task' },
      #       project: { key: "TEST" },
      #       description: 'This task was generated by the bot when creating changes in the repository.'
      #     }
      #   end
      #
      def create(&block)
        builder do
          path 'issue'
          method :post
          instance_eval(&block) if block_given?
        end
        run
      end

      # Retrieves an issue by its ID or key.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response containing the issue details.
      #
      # @example Get an issue
      #   client.issue.get("TEST-123")
      #
      def get(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          instance_eval(&block) if block_given?
        end
        run
      end

      # Deletes an issue by its ID or key.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response after deletion.
      #
      # @example Delete an issue
      #   client.issue.delete("TEST-123")
      #
      def delete(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          method :delete
          instance_eval(&block) if block_given?
        end
        run
      end

      alias del delete

      # Updates an existing issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the update payload.
      # @return [Object] The API response after updating the issue.
      #
      # @example Edit an issue
      #   client.issue.edit("TEST-123") do
      #     payload fields: { summary: "Updated summary" }
      #   end
      #
      def edit(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}"
          method :put
          instance_eval(&block) if block_given?
        end
        run
      end

      # Adds a comment to an issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @yield [builder] Optional block to configure the comment payload.
      # @return [Object] The API response containing the created comment.
      #
      # @example Add a comment
      #   client.issue.comment("TEST-123") do
      #     payload body: "This is a comment"
      #   end
      #
      def comment(id_or_key, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        @client.Comment.create id_or_key, &block
      end

      # Adds a watcher to an issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] name The username to add as a watcher.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response after adding the watcher.
      #
      # @example Add a watcher
      #   client.issue.watchers("TEST-123", "johndoe")
      #
      def watchers(id_or_key, name, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        builder do
          path "issue/#{id_or_key}/watchers"
          method :post
          payload name.to_json
          instance_eval(&block) if block_given?
        end
        run
      end

      # Uploads an attachment to an issue.
      #
      # @param [String] id_or_key The issue ID or key.
      # @param [String] path The local file path of the attachment.
      # @yield [builder] Optional block to configure the request.
      # @return [Object] The API response containing the uploaded attachment.
      #
      # @example Upload an attachment
      #   client.issue.attachments("TEST-123", "/tmp/file.txt")
      #
      def attachments(id_or_key, path, &block)
        abort 'Issue ID or KEY is required' if id_or_key.to_s.strip.empty?
        @client.Attachments.create id_or_key, path, &block
      end
    end
  end
end
