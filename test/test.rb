# frozen_string_literal: true

require 'test/unit'
require 'dotenv'
require_relative '../lib/rujira'

class UnitTest < Test::Unit::TestCase
  Dotenv.load

  def random_name
    Array.new(5) { ('A'..'Z').to_a.sample }.join
  end

  def test_bearer
    return unless Rujira.env_var? 'RUJIRA_TEST'

    Rujira::Api::Myself.get do
      bearer 'SECRET_TOKEN'
    end
  end

  def test_issue_flow
    return unless Rujira.env_var? 'RUJIRA_TEST'

    require 'date'

    now = Date.today
    before = now + 30

    project = random_name
    Rujira::Api::ServerInfo.get
    name = Rujira::Api::Myself.get['name']
    Rujira::Api::Project.create do
      payload key: project.to_s,
              name: project.to_s,
              projectTypeKey: 'software',
              lead: 'root'
    end
    Rujira::Api::Project.get project.to_s
    Rujira::Api::Issue.create do
      payload fields: {
        project: { key: project.to_s },
        summary: 'BOT: added a new feature.',
        description: 'This task was generated by the bot when creating changes in the repository.',
        issuetype: { name: 'Task' }
      }
      params updateHistory: true
    end

    Rujira::Api::Board.list
    Rujira::Api::Board.get 1

    sprint = Rujira::Api::Sprint.create do
      payload name: 'Bot Sprint',
              originBoardId: 1,
              goal: 'Finish core features for release 1.0',
              autoStartStop: false
    end
    Rujira::Api::Sprint.issue sprint['id'], ["#{project}-1"]

    Rujira::Api::Sprint.replace sprint['id'] do
      payload state: 'future',
              name: 'Bot Sprint',
              originBoardId: 1,
              goal: 'Finish core features for release 1.0',
              startDate: now,
              endDate: before,
              autoStartStop: true
    end

    update = Rujira::Api::Sprint.update sprint['id'] do
      payload name: "Bot Sprint #{project}"
    end

    assert_equal 'Bot Sprint', sprint['name']
    assert_equal "Bot Sprint #{project}", update['name']

    issues = Rujira::Api::Sprint.get_issue sprint['id']

    assert_not_empty issues['issues']

    Rujira::Api::Issue.watchers "#{project}-1", name
    Rujira::Api::Issue.get "#{project}-1"
    search = Rujira::Api::Search.get do
      payload jql: "project = #{project} and status IN (\"To Do\", \"In Progress\") ORDER BY issuekey",
              maxResults: 10,
              startAt: 0,
              fields: %w[id key]
    end
    Rujira::Api::Issue.comment "#{project}-1" do
      payload body: 'Adding a new comment'
    end
    Rujira::Api::Issue.edit "#{project}-1" do
      payload update: {
                labels: [{ add: 'bot' }, { remove: 'some' }]
              },
              fields: {
                assignee: { name: name },
                summary: 'This is a shorthand for a set operation on the summary field'
              }
    end

    sprints = Rujira::Api::Board.sprint 1
    sprints['values'].each do |sprint|
      Rujira::Api::Sprint.delete sprint['id']
    end
    search['issues'].each do |issue|
      Rujira::Api::Issue.delete issue['id'] do
        params deleteSubtasks: true
      end
    end
    Rujira::Api::Project.delete project.to_s

    Rujira::Api::Dashboard.list
    Rujira::Api::Dashboard.get 10_000
  end
end
