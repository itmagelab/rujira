# frozen_string_literal: true

require 'test/unit'
require 'dotenv'
require_relative '../lib/rujira'

class UnitTest < Test::Unit::TestCase
  Dotenv.load

  def random_name
    Array.new(5) { ('A'..'Z').to_a.sample }.join
  end

  def test_bearer
    return unless Rujira.env_var? 'RUJIRA_MAKE_MOCK'

    Rujira::Api::Myself.get do
      bearer 'SECRET_TOKEN'
    end
  end

  def test_readme # rubocop:disable Metrics/MethodLength,Metrics/AbcSize
    return unless Rujira.env_var? 'RUJIRA_MAKE_MOCK'

    project = random_name
    Rujira::Api::ServerInfo.get
    name = Rujira::Api::Myself.get['name']
    Rujira::Api::Project.create do
      data key: project.to_s,
           name: project.to_s,
           projectTypeKey: 'software',
           lead: 'root'
    end
    Rujira::Api::Project.get project.to_s
    Rujira::Api::Issue.create do
      data fields: {
        project: { key: project.to_s },
        summary: 'BOT: added a new feature.',
        description: 'This task was generated by the bot when creating changes in the repository.',
        issuetype: { name: 'Task' }
      }
      params updateHistory: true
    end
    Rujira::Api::Issue.watchers "#{project}-1", name
    Rujira::Api::Issue.get "#{project}-1"
    result = Rujira::Api::Search.get do
      data jql: "project = #{project} and status IN (\"To Do\", \"In Progress\") ORDER BY issuekey",
           maxResults: 10,
           startAt: 0,
           fields: %w[id key]
    end
    Rujira::Api::Issue.comment "#{project}-1" do
      data body: 'Adding a new comment'
    end
    Rujira::Api::Issue.edit "#{project}-1" do
      data update: {
             labels: [{ add: 'bot' }, { remove: 'some' }]
           },
           fields: {
             assignee: { name: name },
             summary: 'This is a shorthand for a set operation on the summary field'
           }
    end
    result['issues'].each do |issue|
      Rujira::Api::Issue.del issue['id'] do
        params deleteSubtasks: true
      end
    end
  end
end
